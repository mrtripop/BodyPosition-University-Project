// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BodyPosition.Core;
//
//    var angleModel = AngleModel.FromJson(jsonString);

namespace BodyPosition.MVVM.Model.AngleModel
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class AngleModel
    {
        [JsonProperty("angle")]
        public Dictionary<string, Angle> Angle { get; set; }
    }

    public partial class Angle
    {
        [JsonProperty("id")]
        public int Id { get; set; }

        [JsonProperty("frontPelvis")]
        public double FrontPelvis { get; set; }

        [JsonProperty("rightShoulder")]
        public double RightShoulder { get; set; }

        [JsonProperty("leftShoulder")]
        public double LeftShoulder { get; set; }

        [JsonProperty("pelvis")]
        public double Pelvis { get; set; }

        [JsonProperty("knee")]
        public double Knee { get; set; }

        [JsonProperty("ankle")]
        public double Ankle { get; set; }
    }

    public partial class AngleModel
    {
        public static Dictionary<string, Dictionary<string, AngleModel>> FromJson(string json) => JsonConvert.DeserializeObject<Dictionary<string, Dictionary<string, AngleModel>>>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Dictionary<string, Dictionary<string, AngleModel>> self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
